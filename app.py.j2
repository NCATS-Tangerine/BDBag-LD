import json
import pyld
import os
import sqlite3
from flask import Flask, jsonify, g, Response
from flasgger import Swagger
app = Flask(__name__)
swagger = Swagger(app)

{% for db in datasets %}
def _jsonify (obj):
    return Response(json.dumps(obj, indent=2), mimetype='application/json')
def get_{{ db.name }}_db():
    db = getattr(g, '_{{ db.name }}', None)
    if db is None:
        db_path = "{{ db.db_path }}"
        db_path = os.path.join (os.path.dirname(__file__), db_path)
        db = g._{{ db.name }} = sqlite3.connect (db_path)
    return db
@app.teardown_appcontext
def close_{{ db.name }}_connection(exception):
    db = getattr(g, '_{{ db.name }}', None)
    if db is not None:
        db.close()
{{ db.name }}_connection = sqlite3.connect ("{{ db.db_path }}")
{% for column in db.columns %}
@app.route('/{{ db.name }}_{{ column }}/<{{ column }}>/')
def {{ db.name }}_{{ column }}({{ column }}):
    """Example endpoint returning ________TODO___________
    ---
    parameters:
      - name: {{ column }}
        in: path
        type: string
        required: true
        x-valueType:
          - 'TODO'
        x-requestTemplate:
          - /{{db.name }}_{{ column }}/{% raw %}{{ input }}{% endraw %}
    responses:
      200:
        description: ...
    """
    results = []
    cursor = get_{{ db.name }}_db ().cursor ()
    data = cursor.execute (
        "SELECT * from {{ db.name }} where {{ column }} = '{0}'".format (
            {{ column }}))
    for r in data:
        row = {}
        {% for col in db.columns %}row["{{ col }}"]=r[{{ loop.index0 }}]
        {% endfor %}
        results.append (row)
    cursor.close ()
    return _jsonify(results)

{% endfor %}
{% endfor %}
app.run(debug=True)
